package interfaces;

public class AccountTest {
	
}

interface Account{
	void deposit(double amount);
	void getBalance();
}
abstract class BaseAccount implements Account{
	protected Bank bank;
	protected double balance;
	
	public BaseAccount(Bank bank) {
		this.bank = bank;
		this.balance = 0.0;
	}
	
	@Override
	public void deposit(double amount) {
		balance += amount;
		System.out.println("Deposited "+amount+" . Account balance : "+balance);
	}
	
	@Override
	public void getBalance() {
		System.out.println("Current account balance : "+balance);
	}
	
	public abstract void calculateInterest();	
	
}

class SavingAccount extends BaseAccount{
	private double interestRate;
	public SavingAccount(Bank bank,double interestRate) {
		super(bank);
		this.interestRate = interestRate;
	}
	
	@Override
	public void calculateInterest() {
		double interest = balance * (interestRate/100);
		System.out.println("Interest calculated at rate "+interestRate+" % : "+interest);
	}
}

class currentAccount extends BaseAccount{

	private double monthlyFee;
	public currentAccount(Bank bank,double monthlyFee) {
		super(bank);
		this.monthlyFee = monthlyFee;
	}
	@Override
	public void calculateInterest() {
        System.out.println("Current account type do not earn interest.");
	}
	public void withdraw(double amount) {
		if(balance >= amount) {
			balance -= amount;
			
		}
	}
}



class Bank{
	
}